cmake_minimum_required(VERSION 3.8)
project(sample_app_callback_isolated)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(rclcpp_components REQUIRED)
find_package(std_msgs REQUIRED)

find_package(rclcpp_component_container_callback_isolated REQUIRED)

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # uncomment the line when a copyright and license is not present in all source files
  #set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # uncomment the line when this package is not in a git repo
  #set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

include_directories(include)

add_library(sample_node SHARED src/sample_node.cpp)
ament_target_dependencies(sample_node rclcpp rclcpp_components std_msgs)
#rclcpp_components_register_nodes(sample_node "SampleNode")
callback_rclcpp_components_register_node(sample_node
  PLUGIN "SampleNode"
  EXECUTABLE topic_state_monitor_node
)

#add_executable(sample_node_main src/sample_node_main.cpp)
#target_link_libraries(sample_node_main sample_node)
#ament_target_dependencies(sample_node_main rclcpp rclcpp_component_container_callback_isolated)

# Install the library and executable
#install(TARGETS
#  sample_node
#  sample_node_main
#  DESTINATION lib/${PROJECT_NAME}
#)

# Install headers
install(DIRECTORY include/
  DESTINATION include
)

# If the container is needed, add this as well
install(TARGETS sample_node
  EXPORT export_${PROJECT_NAME}
  DESTINATION lib/${PROJECT_NAME}
)

install(DIRECTORY launch/ DESTINATION share/${PROJECT_NAME}/launch)

ament_package()
